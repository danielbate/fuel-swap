/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.2
  Forc version: 0.66.5
  Fuel-Core version: 0.40.1
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum InitErrorInput { AssetPairAlreadySet = 'AssetPairAlreadySet', AssetPairNotSet = 'AssetPairNotSet', IdenticalAssets = 'IdenticalAssets' };
export enum InitErrorOutput { AssetPairAlreadySet = 'AssetPairAlreadySet', AssetPairNotSet = 'AssetPairNotSet', IdenticalAssets = 'IdenticalAssets' };
export type InputErrorInput = Enum<{ CannotAddLessThanMinimumLiquidity: BigNumberish, DeadlinePassed: BigNumberish, ExpectedNonZeroAmount: AssetIdInput, ExpectedNonZeroParameter: AssetIdInput, InvalidAsset: undefined }>;
export type InputErrorOutput = Enum<{ CannotAddLessThanMinimumLiquidity: BN, DeadlinePassed: BN, ExpectedNonZeroAmount: AssetIdOutput, ExpectedNonZeroParameter: AssetIdOutput, InvalidAsset: void }>;
export type TransactionErrorInput = Enum<{ DesiredAmountTooHigh: BigNumberish, DesiredAmountTooLow: BigNumberish, ExpectedNonZeroDeposit: AssetIdInput, InsufficientReserve: AssetIdInput, NoLiquidityToRemove: undefined }>;
export type TransactionErrorOutput = Enum<{ DesiredAmountTooHigh: BN, DesiredAmountTooLow: BN, ExpectedNonZeroDeposit: AssetIdOutput, InsufficientReserve: AssetIdOutput, NoLiquidityToRemove: void }>;

export type AddLiquidityEventInput = { added_assets: AssetPairInput, liquidity: AssetInput };
export type AddLiquidityEventOutput = { added_assets: AssetPairOutput, liquidity: AssetOutput };
export type AssetInput = { id: AssetIdInput, amount: BigNumberish };
export type AssetOutput = { id: AssetIdOutput, amount: BN };
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type AssetPairInput = { a: AssetInput, b: AssetInput };
export type AssetPairOutput = { a: AssetOutput, b: AssetOutput };
export type DefineAssetPairEventInput = { asset_a_id: AssetIdInput, asset_b_id: AssetIdInput };
export type DefineAssetPairEventOutput = { asset_a_id: AssetIdOutput, asset_b_id: AssetIdOutput };
export type DepositEventInput = { deposited_asset: AssetInput, new_balance: BigNumberish };
export type DepositEventOutput = { deposited_asset: AssetOutput, new_balance: BN };
export type PoolInfoInput = { reserves: AssetPairInput, liquidity: BigNumberish };
export type PoolInfoOutput = { reserves: AssetPairOutput, liquidity: BN };
export type PreviewAddLiquidityInfoInput = { other_asset_to_add: AssetInput, liquidity_asset_to_receive: AssetInput };
export type PreviewAddLiquidityInfoOutput = { other_asset_to_add: AssetOutput, liquidity_asset_to_receive: AssetOutput };
export type PreviewSwapInfoInput = { other_asset: AssetInput, sufficient_reserve: boolean };
export type PreviewSwapInfoOutput = { other_asset: AssetOutput, sufficient_reserve: boolean };
export type RemoveLiquidityEventInput = { removed_reserve: AssetPairInput, burned_liquidity: AssetInput };
export type RemoveLiquidityEventOutput = { removed_reserve: AssetPairOutput, burned_liquidity: AssetOutput };
export type RemoveLiquidityInfoInput = { removed_amounts: AssetPairInput, burned_liquidity: AssetInput };
export type RemoveLiquidityInfoOutput = { removed_amounts: AssetPairOutput, burned_liquidity: AssetOutput };
export type SwapEventInput = { input: AssetInput, output: AssetInput };
export type SwapEventOutput = { input: AssetOutput, output: AssetOutput };
export type WithdrawEventInput = { withdrawn_asset: AssetInput, remaining_balance: BigNumberish };
export type WithdrawEventOutput = { withdrawn_asset: AssetOutput, remaining_balance: BN };

export type ExchangeContractConfigurables = Partial<{
  LIQUIDITY_MINER_FEE: BigNumberish;
  MINIMUM_LIQUIDITY: BigNumberish;
}>;

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "enum errors::InitError",
      "concreteTypeId": "b4ae17354cdb7ecb35eab29b63c2adf1350518f0ab34c2bb44302f0aee923c01",
      "metadataTypeId": 2
    },
    {
      "type": "enum errors::InputError",
      "concreteTypeId": "450f24be2388d767c2a3683c3a8f173b79f7f02437bf6098cd36ba13bfc4c1b2",
      "metadataTypeId": 3
    },
    {
      "type": "enum errors::TransactionError",
      "concreteTypeId": "eec3bc0b7e8d11a9b1c89b62f88a2f88e42b6bdfd45b117d3aa93f16d1d87e2e",
      "metadataTypeId": 4
    },
    {
      "type": "enum std::option::Option<u64>",
      "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      "metadataTypeId": 5,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "struct events::AddLiquidityEvent",
      "concreteTypeId": "44b6209550e1a203d9183a00ef3dfcd0250a920430d6069529e6b003a2c42140",
      "metadataTypeId": 7
    },
    {
      "type": "struct events::DefineAssetPairEvent",
      "concreteTypeId": "7d3502c4c4bdc008280668f114e50375990263fecc432aec47f7e251b4ec5e73",
      "metadataTypeId": 8
    },
    {
      "type": "struct events::DepositEvent",
      "concreteTypeId": "aeb9b947da259c606e2c25be1150e2150f609fe5f2ec593c9a7ebb771e4e7065",
      "metadataTypeId": 9
    },
    {
      "type": "struct events::RemoveLiquidityEvent",
      "concreteTypeId": "9fbb80ab9da2e3f8eda3138ff8316cd99cee0bbce530ab41214b06f4841189a9",
      "metadataTypeId": 10
    },
    {
      "type": "struct events::SwapEvent",
      "concreteTypeId": "7a73e29ec32ac96a481de54c4648cd04bc25970e6fcd27f2b9b4ea0c09a58fe5",
      "metadataTypeId": 11
    },
    {
      "type": "struct events::WithdrawEvent",
      "concreteTypeId": "9787083b0003f388ec6bf30609ff6a10c76fada67314a162841a445b07a17168",
      "metadataTypeId": 12
    },
    {
      "type": "struct libraries::data_structures::Asset",
      "concreteTypeId": "81ff277b142ff42a650e979f50068ce2b30ba9479ab3add3379b470450cb2da1",
      "metadataTypeId": 13
    },
    {
      "type": "struct libraries::data_structures::PoolInfo",
      "concreteTypeId": "0f2b0923e99b83445f128fbe9a2ee502de2bd4bf5d0b56d79b17e89d7584b951",
      "metadataTypeId": 15
    },
    {
      "type": "struct libraries::data_structures::PreviewAddLiquidityInfo",
      "concreteTypeId": "8bf390c7d11bb9fd5051f2f7cee29830122ea8a73ddb72a522a59141d9b747cd",
      "metadataTypeId": 16
    },
    {
      "type": "struct libraries::data_structures::PreviewSwapInfo",
      "concreteTypeId": "d363985b54c2e94792f528141e92eae57e5ce3feb2efe4e6a376fc2675e0abee",
      "metadataTypeId": 17
    },
    {
      "type": "struct libraries::data_structures::RemoveLiquidityInfo",
      "concreteTypeId": "1e986d4dc368ee02a32784b7addc2d89c6cc159b12a0c882129a6795f6b4471a",
      "metadataTypeId": 18
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 19
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "b256",
      "metadataTypeId": 0
    },
    {
      "type": "bool",
      "metadataTypeId": 1
    },
    {
      "type": "enum errors::InitError",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "AssetPairAlreadySet",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "AssetPairNotSet",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "IdenticalAssets",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum errors::InputError",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "CannotAddLessThanMinimumLiquidity",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "DeadlinePassed",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "ExpectedNonZeroAmount",
          "typeId": 19
        },
        {
          "name": "ExpectedNonZeroParameter",
          "typeId": 19
        },
        {
          "name": "InvalidAsset",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum errors::TransactionError",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "DesiredAmountTooHigh",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "DesiredAmountTooLow",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "ExpectedNonZeroDeposit",
          "typeId": 19
        },
        {
          "name": "InsufficientReserve",
          "typeId": 19
        },
        {
          "name": "NoLiquidityToRemove",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "None",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Some",
          "typeId": 6
        }
      ],
      "typeParameters": [
        6
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 6
    },
    {
      "type": "struct events::AddLiquidityEvent",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "added_assets",
          "typeId": 14
        },
        {
          "name": "liquidity",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct events::DefineAssetPairEvent",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "asset_a_id",
          "typeId": 19
        },
        {
          "name": "asset_b_id",
          "typeId": 19
        }
      ]
    },
    {
      "type": "struct events::DepositEvent",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "deposited_asset",
          "typeId": 13
        },
        {
          "name": "new_balance",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct events::RemoveLiquidityEvent",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "removed_reserve",
          "typeId": 14
        },
        {
          "name": "burned_liquidity",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct events::SwapEvent",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "input",
          "typeId": 13
        },
        {
          "name": "output",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct events::WithdrawEvent",
      "metadataTypeId": 12,
      "components": [
        {
          "name": "withdrawn_asset",
          "typeId": 13
        },
        {
          "name": "remaining_balance",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct libraries::data_structures::Asset",
      "metadataTypeId": 13,
      "components": [
        {
          "name": "id",
          "typeId": 19
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct libraries::data_structures::AssetPair",
      "metadataTypeId": 14,
      "components": [
        {
          "name": "a",
          "typeId": 13
        },
        {
          "name": "b",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct libraries::data_structures::PoolInfo",
      "metadataTypeId": 15,
      "components": [
        {
          "name": "reserves",
          "typeId": 14
        },
        {
          "name": "liquidity",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct libraries::data_structures::PreviewAddLiquidityInfo",
      "metadataTypeId": 16,
      "components": [
        {
          "name": "other_asset_to_add",
          "typeId": 13
        },
        {
          "name": "liquidity_asset_to_receive",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct libraries::data_structures::PreviewSwapInfo",
      "metadataTypeId": 17,
      "components": [
        {
          "name": "other_asset",
          "typeId": 13
        },
        {
          "name": "sufficient_reserve",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct libraries::data_structures::RemoveLiquidityInfo",
      "metadataTypeId": 18,
      "components": [
        {
          "name": "removed_amounts",
          "typeId": 14
        },
        {
          "name": "burned_liquidity",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 19,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "desired_liquidity",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "deadline",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "add_liquidity",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset_id",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "balance",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset_a",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "asset_b",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "constructor",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "deposit",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "pool_info",
      "output": "0f2b0923e99b83445f128fbe9a2ee502de2bd4bf5d0b56d79b17e89d7584b951",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "81ff277b142ff42a650e979f50068ce2b30ba9479ab3add3379b470450cb2da1"
        }
      ],
      "name": "preview_add_liquidity",
      "output": "8bf390c7d11bb9fd5051f2f7cee29830122ea8a73ddb72a522a59141d9b747cd",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "exact_input_asset",
          "concreteTypeId": "81ff277b142ff42a650e979f50068ce2b30ba9479ab3add3379b470450cb2da1"
        }
      ],
      "name": "preview_swap_exact_input",
      "output": "d363985b54c2e94792f528141e92eae57e5ce3feb2efe4e6a376fc2675e0abee",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "exact_output_asset",
          "concreteTypeId": "81ff277b142ff42a650e979f50068ce2b30ba9479ab3add3379b470450cb2da1"
        }
      ],
      "name": "preview_swap_exact_output",
      "output": "d363985b54c2e94792f528141e92eae57e5ce3feb2efe4e6a376fc2675e0abee",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "min_asset_a",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "min_asset_b",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "deadline",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "remove_liquidity",
      "output": "1e986d4dc368ee02a32784b7addc2d89c6cc159b12a0c882129a6795f6b4471a",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "min_output",
          "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d"
        },
        {
          "name": "deadline",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "swap_exact_input",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "output",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "deadline",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "swap_exact_output",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset",
          "concreteTypeId": "81ff277b142ff42a650e979f50068ce2b30ba9479ab3add3379b470450cb2da1"
        }
      ],
      "name": "withdraw",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "13019369090464841419",
      "concreteTypeId": "b4ae17354cdb7ecb35eab29b63c2adf1350518f0ab34c2bb44302f0aee923c01"
    },
    {
      "logId": "4976236512326244199",
      "concreteTypeId": "450f24be2388d767c2a3683c3a8f173b79f7f02437bf6098cd36ba13bfc4c1b2"
    },
    {
      "logId": "17204801759039263145",
      "concreteTypeId": "eec3bc0b7e8d11a9b1c89b62f88a2f88e42b6bdfd45b117d3aa93f16d1d87e2e"
    },
    {
      "logId": "4951180666019619331",
      "concreteTypeId": "44b6209550e1a203d9183a00ef3dfcd0250a920430d6069529e6b003a2c42140"
    },
    {
      "logId": "9022120472644272136",
      "concreteTypeId": "7d3502c4c4bdc008280668f114e50375990263fecc432aec47f7e251b4ec5e73"
    },
    {
      "logId": "12590297951544646752",
      "concreteTypeId": "aeb9b947da259c606e2c25be1150e2150f609fe5f2ec593c9a7ebb771e4e7065"
    },
    {
      "logId": "11509934747247895544",
      "concreteTypeId": "9fbb80ab9da2e3f8eda3138ff8316cd99cee0bbce530ab41214b06f4841189a9"
    },
    {
      "logId": "8823645266456004970",
      "concreteTypeId": "7a73e29ec32ac96a481de54c4648cd04bc25970e6fcd27f2b9b4ea0c09a58fe5"
    },
    {
      "logId": "10918704871079408520",
      "concreteTypeId": "9787083b0003f388ec6bf30609ff6a10c76fada67314a162841a445b07a17168"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "LIQUIDITY_MINER_FEE",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "offset": 55336
    },
    {
      "name": "MINIMUM_LIQUIDITY",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "offset": 55344
    }
  ]
};

const storageSlots: StorageSlot[] = [
  {
    "key": "871313c373a81d6104782a2726701f7c32f856f32db74a542807b80bb9206da6",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "871313c373a81d6104782a2726701f7c32f856f32db74a542807b80bb9206da7",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "871313c373a81d6104782a2726701f7c32f856f32db74a542807b80bb9206da8",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "db45ac18b859a708ac10df40bb5f8d3a11f91f214fc584f454292cd658b6b3da",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class ExchangeContractInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    add_liquidity: FunctionFragment;
    balance: FunctionFragment;
    constructor: FunctionFragment;
    deposit: FunctionFragment;
    pool_info: FunctionFragment;
    preview_add_liquidity: FunctionFragment;
    preview_swap_exact_input: FunctionFragment;
    preview_swap_exact_output: FunctionFragment;
    remove_liquidity: FunctionFragment;
    swap_exact_input: FunctionFragment;
    swap_exact_output: FunctionFragment;
    withdraw: FunctionFragment;
  };
}

export class ExchangeContract extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: ExchangeContractInterface;
  declare functions: {
    add_liquidity: InvokeFunction<[desired_liquidity: BigNumberish, deadline: BigNumberish], BN>;
    balance: InvokeFunction<[asset_id: AssetIdInput], BN>;
    constructor: InvokeFunction<[asset_a: AssetIdInput, asset_b: AssetIdInput], void>;
    deposit: InvokeFunction<[], void>;
    pool_info: InvokeFunction<[], PoolInfoOutput>;
    preview_add_liquidity: InvokeFunction<[asset: AssetInput], PreviewAddLiquidityInfoOutput>;
    preview_swap_exact_input: InvokeFunction<[exact_input_asset: AssetInput], PreviewSwapInfoOutput>;
    preview_swap_exact_output: InvokeFunction<[exact_output_asset: AssetInput], PreviewSwapInfoOutput>;
    remove_liquidity: InvokeFunction<[min_asset_a: BigNumberish, min_asset_b: BigNumberish, deadline: BigNumberish], RemoveLiquidityInfoOutput>;
    swap_exact_input: InvokeFunction<[min_output: Option<BigNumberish>, deadline: BigNumberish], BN>;
    swap_exact_output: InvokeFunction<[output: BigNumberish, deadline: BigNumberish], BN>;
    withdraw: InvokeFunction<[asset: AssetInput], void>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
