/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.2
  Forc version: 0.66.5
  Fuel-Core version: 0.40.1
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum InitErrorInput { BytecodeRootAlreadySet = 'BytecodeRootAlreadySet', BytecodeRootDoesNotMatch = 'BytecodeRootDoesNotMatch', BytecodeRootNotSet = 'BytecodeRootNotSet', PairDoesNotDefinePool = 'PairDoesNotDefinePool' };
export enum InitErrorOutput { BytecodeRootAlreadySet = 'BytecodeRootAlreadySet', BytecodeRootDoesNotMatch = 'BytecodeRootDoesNotMatch', BytecodeRootNotSet = 'BytecodeRootNotSet', PairDoesNotDefinePool = 'PairDoesNotDefinePool' };

export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type RegisterPoolEventInput = { asset_pair: [AssetIdInput, AssetIdInput], pool: ContractIdInput };
export type RegisterPoolEventOutput = { asset_pair: [AssetIdOutput, AssetIdOutput], pool: ContractIdOutput };
export type SetExchangeBytecodeRootEventInput = { root: string };
export type SetExchangeBytecodeRootEventOutput = SetExchangeBytecodeRootEventInput;

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId)",
      "concreteTypeId": "d3ddf84f691d572b4313a7be3ae1d8b67fe9061c281ff6ae955e4c4441524f92",
      "metadataTypeId": 0
    },
    {
      "type": "enum errors::InitError",
      "concreteTypeId": "b4ae17354cdb7ecb35eab29b63c2adf1350518f0ab34c2bb44302f0aee923c01",
      "metadataTypeId": 2
    },
    {
      "type": "enum std::option::Option<struct std::contract_id::ContractId>",
      "concreteTypeId": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
      "metadataTypeId": 3,
      "typeArguments": [
        "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
      ]
    },
    {
      "type": "struct events::RegisterPoolEvent",
      "concreteTypeId": "d6962172fff53b1e87f1dabd523393ac8ef52171ed88a28abd134ed74c7ba2f6",
      "metadataTypeId": 5
    },
    {
      "type": "struct events::SetExchangeBytecodeRootEvent",
      "concreteTypeId": "d5187188a7c15e618d7efff156cc7762b15406bbefb1bb6c37e1611363829918",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 8
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 7
        },
        {
          "name": "__tuple_element",
          "typeId": 7
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "enum errors::InitError",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "BytecodeRootAlreadySet",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "BytecodeRootDoesNotMatch",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "BytecodeRootNotSet",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "PairDoesNotDefinePool",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "None",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "Some",
          "typeId": 4
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 4
    },
    {
      "type": "struct events::RegisterPoolEvent",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "asset_pair",
          "typeId": 0
        },
        {
          "name": "pool",
          "typeId": 8
        }
      ]
    },
    {
      "type": "struct events::SetExchangeBytecodeRootEvent",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "root",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "asset_pair",
          "concreteTypeId": "d3ddf84f691d572b4313a7be3ae1d8b67fe9061c281ff6ae955e4c4441524f92"
        },
        {
          "name": "pool",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        }
      ],
      "name": "add_pool",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "exchange_bytecode_root",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        }
      ],
      "name": "initialize",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset_pair",
          "concreteTypeId": "d3ddf84f691d572b4313a7be3ae1d8b67fe9061c281ff6ae955e4c4441524f92"
        }
      ],
      "name": "pool",
      "output": "0d79387ad3bacdc3b7aad9da3a96f4ce60d9a1b6002df254069ad95a3931d5c8",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "13019369090464841419",
      "concreteTypeId": "b4ae17354cdb7ecb35eab29b63c2adf1350518f0ab34c2bb44302f0aee923c01"
    },
    {
      "logId": "15462583148427426590",
      "concreteTypeId": "d6962172fff53b1e87f1dabd523393ac8ef52171ed88a28abd134ed74c7ba2f6"
    },
    {
      "logId": "15355147761263664737",
      "concreteTypeId": "d5187188a7c15e618d7efff156cc7762b15406bbefb1bb6c37e1611363829918"
    }
  ],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [
  {
    "key": "b732e2c5f2bf595c5ef60abd0040766706862f4ecb5b5b8a418664cae6ff3dfc",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  },
  {
    "key": "b732e2c5f2bf595c5ef60abd0040766706862f4ecb5b5b8a418664cae6ff3dfd",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class AMMContractInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    add_pool: FunctionFragment;
    initialize: FunctionFragment;
    pool: FunctionFragment;
  };
}

export class AMMContract extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: AMMContractInterface;
  declare functions: {
    add_pool: InvokeFunction<[asset_pair: [AssetIdInput, AssetIdInput], pool: ContractIdInput], void>;
    initialize: InvokeFunction<[exchange_bytecode_root: ContractIdInput], void>;
    pool: InvokeFunction<[asset_pair: [AssetIdInput, AssetIdInput]], Option<ContractIdOutput>>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
