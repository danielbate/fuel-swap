/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.2
  Forc version: 0.66.5
  Fuel-Core version: 0.40.1
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
} from 'fuels';

import type { Enum, Vec } from "./common";

export enum InputErrorInput { RouteTooShort = 'RouteTooShort' };
export enum InputErrorOutput { RouteTooShort = 'RouteTooShort' };
export type SwapErrorInput = Enum<{ ExcessiveSlippage: BigNumberish, PairExchangeNotRegistered: [AssetIdInput, AssetIdInput] }>;
export type SwapErrorOutput = Enum<{ ExcessiveSlippage: BN, PairExchangeNotRegistered: [AssetIdOutput, AssetIdOutput] }>;

export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;

export type SwapExactOutputInputs = [assets: Vec<AssetIdInput>, output_amount: BigNumberish, maximum_input_amount: BigNumberish, deadline: BigNumberish];
export type SwapExactOutputOutput = BN;

export type SwapExactOutputConfigurables = Partial<{
  AMM_ID: string;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "enum InputError",
      "concreteTypeId": "f80518e57110202a12ede2db119a63d0fa0b1e209891bf7fff6ee4e9a2b22e77",
      "metadataTypeId": 2
    },
    {
      "type": "enum SwapError",
      "concreteTypeId": "b8c00f34535a99472880aae9aaad27e10aca913cead694306619f915ae1421a8",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::vec::Vec<struct std::asset_id::AssetId>",
      "concreteTypeId": "8b2275934873f381a769c82334e6f66595eeb350d8b2dd012eef4d9bb117942b",
      "metadataTypeId": 8,
      "typeArguments": [
        "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "()",
      "metadataTypeId": 0
    },
    {
      "type": "(_, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 6
        }
      ]
    },
    {
      "type": "enum InputError",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "RouteTooShort",
          "typeId": 0
        }
      ]
    },
    {
      "type": "enum SwapError",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "ExcessiveSlippage",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "PairExchangeNotRegistered",
          "typeId": 1
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 4
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 5
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "ptr",
          "typeId": 5
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "buf",
          "typeId": 7,
          "typeArguments": [
            {
              "name": "",
              "typeId": 4
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        4
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "assets",
          "concreteTypeId": "8b2275934873f381a769c82334e6f66595eeb350d8b2dd012eef4d9bb117942b"
        },
        {
          "name": "output_amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "maximum_input_amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "deadline",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "main",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Swaps assets along a route by specifying exact output for each swap."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `assets`: [Vec<AssetId>] - The assets along the swap route."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `output_amount`: [u64] - The desired amount of the output asset."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `maximum_input_amount`: [u64] - The maximum amount of the input asset."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `deadline`: [u64] - The limit on block height for operation."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `u64`: The amount of the input asset that was sold."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When `assets.len()` is less than two."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the exchange contract has not been registered in the AMM."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the amount of the sold asset is greater than `maximum_input_amount`."
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "17871718070013141034",
      "concreteTypeId": "f80518e57110202a12ede2db119a63d0fa0b1e209891bf7fff6ee4e9a2b22e77"
    },
    {
      "logId": "13312657215918348615",
      "concreteTypeId": "b8c00f34535a99472880aae9aaad27e10aca913cead694306619f915ae1421a8"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_ID",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "offset": 9584
    }
  ]
};

const bytecode = decompressBytecode('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');

export class SwapExactOutput extends Script<SwapExactOutputInputs, SwapExactOutputOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
