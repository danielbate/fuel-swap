/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.97.2
  Forc version: 0.66.5
  Fuel-Core version: 0.40.1
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
} from 'fuels';

import type { Option, Enum, Vec } from "./common";

export enum InputErrorInput { RouteTooShort = 'RouteTooShort' };
export enum InputErrorOutput { RouteTooShort = 'RouteTooShort' };
export type SwapErrorInput = Enum<{ ExcessiveSlippage: BigNumberish, PairExchangeNotRegistered: [AssetIdInput, AssetIdInput] }>;
export type SwapErrorOutput = Enum<{ ExcessiveSlippage: BN, PairExchangeNotRegistered: [AssetIdOutput, AssetIdOutput] }>;

export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;

export type SwapExactInputInputs = [assets: Vec<AssetIdInput>, input_amount: BigNumberish, minimum_output_amount: Option<BigNumberish>, deadline: BigNumberish];
export type SwapExactInputOutput = BN;

export type SwapExactInputConfigurables = Partial<{
  AMM_ID: string;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "enum InputError",
      "concreteTypeId": "f80518e57110202a12ede2db119a63d0fa0b1e209891bf7fff6ee4e9a2b22e77",
      "metadataTypeId": 2
    },
    {
      "type": "enum SwapError",
      "concreteTypeId": "b8c00f34535a99472880aae9aaad27e10aca913cead694306619f915ae1421a8",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::option::Option<u64>",
      "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d",
      "metadataTypeId": 4,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 7
    },
    {
      "type": "struct std::vec::Vec<struct std::asset_id::AssetId>",
      "concreteTypeId": "8b2275934873f381a769c82334e6f66595eeb350d8b2dd012eef4d9bb117942b",
      "metadataTypeId": 9,
      "typeArguments": [
        "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "()",
      "metadataTypeId": 0
    },
    {
      "type": "(_, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 7
        },
        {
          "name": "__tuple_element",
          "typeId": 7
        }
      ]
    },
    {
      "type": "enum InputError",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "RouteTooShort",
          "typeId": 0
        }
      ]
    },
    {
      "type": "enum SwapError",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "ExcessiveSlippage",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "PairExchangeNotRegistered",
          "typeId": 1
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "None",
          "typeId": 0
        },
        {
          "name": "Some",
          "typeId": 5
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 5
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "ptr",
          "typeId": 6
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "buf",
          "typeId": 8,
          "typeArguments": [
            {
              "name": "",
              "typeId": 5
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "assets",
          "concreteTypeId": "8b2275934873f381a769c82334e6f66595eeb350d8b2dd012eef4d9bb117942b"
        },
        {
          "name": "input_amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "minimum_output_amount",
          "concreteTypeId": "d852149004cc9ec0bbe7dc4e37bffea1d41469b759512b6136f2e865a4c06e7d"
        },
        {
          "name": "deadline",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "main",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Swaps assets along a route by specifying exact input for each swap."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Arguments"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `assets`: [Vec<AssetId>] - The assets along the swap route."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `input_amount`: [u64] - The desired amount of the input asset."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `minimum_output_amount`: [u64] - The maximum amount of the output asset."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * `deadline`: [u64] - The limit on block height for operation."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Returns"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * The amount of the output asset."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " # Reverts"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When `assets.len()` is less than two."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the exchange contract has not been registered in the AMM."
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " * When the amount of the brought asset is less than `minimum_output_amount`."
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "17871718070013141034",
      "concreteTypeId": "f80518e57110202a12ede2db119a63d0fa0b1e209891bf7fff6ee4e9a2b22e77"
    },
    {
      "logId": "13312657215918348615",
      "concreteTypeId": "b8c00f34535a99472880aae9aaad27e10aca913cead694306619f915ae1421a8"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_ID",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "offset": 8408
    }
  ]
};

const bytecode = decompressBytecode('H4sIAAAAAAAAA31aXWxUxxWeXa9hIT++xF6wLkqzD4ZeVUFyFIN4SJW7XW/X7rL1bGwLp8lmjQLUVdOwdYE6ClU2CUEOTw5VEidpWir1B7UPuet/MLZXeSlqU8kvVXloG6PmB1q28kORjPLgfOfM3N3r3etYQh7PnTlzzpnv/A7mars4KURI8E90UP++nl0vBYz1dfEG/hi+KUaM/35Qkp+IqFyxRXTtUTHwxUpQfrESOikCj5q3JdaFBmSuuHzEFttzZfGajE9ZMukMDneJsJUIFWR8oovHsZaCTE7OVeafmpwzbw3W0nzBjC8L0HkZdMLZpPOyecuoXfOamVwWMuXM5crGLpmIhocPMc0SzpLDncKwYm02eLiIsww6K3db7MQ34qlV8TF1kMfq25ls3DlDZ+2MhezTtvg5zj4oeyeugVarlQnZPnz2mIeXhc98t+b/PGhImSwOufLijPPNMSFAvwXjfRjTWYED0LqMO2u528ZDPvT2k6y5mBGQyYkVVx7IsspjyII7bIQubkKOB3m+Iv+kcNf70H2I+MS+Ieiu1eruLOXK0pDpaHRYYk86QjI0y/ikAXoHNT26x4Pq/MkCj3E+ZHkOujshU8VV2YM1kujtF7JnIix7J7tkxo4O9xHNBPQYFeanQpg32oX5z7p7tbTuzoHmOejuUv3dh17Wdx9VfLeUoJdWHifaSuBhzLwF+p8aOCNau/ebLHPSqdw95ChVMBGfaK/io1hy6dTQOKNpSM9djLh3wbrPhuxsLB/IZvNiT5butpgn/ZPcG2mJXxMt7Ila5ZANOqM8jk8Rdq+BZlTTv8RjZT83K/OHCaOTN6Gr16H/0WaF3QDotmVjMkBYMzsNwlsD/Q3awd2JFujXeDWbloLmsO/VSHeLON3F+3bU61v8gfFXNs5GEsBuJ6/bgn1niY/dMdhPWbwCHl6xEh0i2+OczfW3Q+apVpmQ4aoPKK4oXPYBA3V6+BXpIZuQQaaZaLMNyAK6L4Lui6dD4j7SS3PCsHF+I+6GcAgddBZgF+TDtmPOcueeUXO0js7nOVd/kDlowO5y/SJINs/jsjhzSoj1N4V46K0wdMY+TYyY8YvCTI4Js6cgzN4Vwpy1ObbE1/RdhtVdAh80prvEGPfZ7o8nEdV40rySrpyByn3TmDCRhg/6vxAXiK+7thgHn2+D3++sCQG+t3r4Diu+wXNqhWxJDNvgIzklzDsG7Q+bd6Pu/q16v1fuwYrc2J9NY78kfJI9OzaPe6Yr87tlRBjp/fBPdOdsk4TfEv+GP9ZnDnrOdHluqucZ53UL/IuC7yiPya/vPtRSMrrbSrkY5uIO5GA9QA7DpdlUqweXnsJom9hrY97O817PPlf+htp9WbKdjWsb1Nqm9SrfTSPms1gf1xjJgf5h4CR5ZVT5l7Pwu7X33fAe2RPNkz3W46FBx7YJG/68C5iHzQU/zJUDH+duB25n48XboE9xbTP6r9L+KGxFx7JHZHzaUrbXYUN/v6W4o/1CwOys2HQbaH8sk9PkG+HXOgqw8d9rm1MxCt9kwgjL1OIqx1v43myy+C9/XDf0KlxPtkOO49izJtMG4SdspfdAvssUd7qIhtpfa0+NDxM/dAcnRfDPWm7KHVhumZrm2KBiSe3ehrQ6uxjFekvZ1GWHx+xDZ4b8eW68rPfRWrZFOpd8RDa1eq/RHS3J3tm54QHKCV5D/jK9bN6yNQ+18bXhYabVWxzFesvKNBIP13kcSxRk78yo4qE2p2oc1/uWsTaq9iGm0zgWKcgEcjIaJ0AjuTAEfdpWolHIARv2N7kCuzmDuw7BX/8Mulc5Asu/MCRTU2SzttWN9fHZZY7zsQjd69omd9il9bHKa+mc+GJ1X3zWx5cH31F7Jugs3BWfRfttK0b3Pteu8gM6d6bVvXvzRt3ZY5pOazVWL6ox+8XFVpm8ale/LVC81N8WrgEr5EP1t2noWmGlhtfX9RkU97WerlKs4FieTa7eZyQM5BRLhFtD6W1xGTJccv+mfKYmPziu8qolW/bOzQ0fxbrMXuip9p5DT5spumfkxkfpno9THErj/r4r43MU39qtWCdwPqPjRh3G/63zNw9vS4a6G+gZY/B57Sv4fEztn7zIPp3vA+Pucxf32aEnTJtifuAz06YYEliBHXwGW1+B3XVtFgNPiQDnMzo30nF/gfIrlftjXIsX7OF8Llfe8T+ZXMoDozfZR4Af+J/3lf8TX9djjy+aHEG+jJxzesBPP6A7pfUzoOQj/Vwd4zHjcELLzfNOdf4q4VvNx4xwZT5+lWxJ+Y/UQitszLK6QzbnGcj/4ON6vPOQ1eYx583zRtUPLVIup+hgDNujGMXf4Jsv1vpm5FGIA8YoaA/JjAjD9m0rswc8XKY8Hf6T7pawXYePfyj6Vyr0ZXym4jNrsPCivjfKY3UOMk9xQOec8yof4ZptfgT5RNR6sgWxePV++Ebk31OjwO4bmDfw+wJ4HndtCN8uQTdvyu9Pke82rGMtyBfz72R/SLGGfNL8eBV/83M8TkDfJ+av85k/IhqznrpnJryJLT+oZVBnK12rfazrWcZJTb3xvN5DZylfkXLItuGfCBdTyu/F3qS845e6djuoxxRbkUOubj2A3ILWyphAbFwinwz8st9TcVrFnBXzphuv6uqeXZoPwpjr6yq1CGyvLJOL7bDn6x7fqX22n+8MNGi/TTmlS4/u1vWdI9D1WlXmqwbujmopypsfAN9Uh2AtYXfmmnmTzvHjW9zSfKsaqoYWzhmr0MEY/ppydJcf8nFKvthYEPJ1ydQVqyrfrLG5fOIvWj5FQ9Gr1vYY4yyP/18gHLixYQU2kffEhnF/PAWC+gyi68YG2qdxveSp/xZBc64Sa+tzsuANRWtJwm4pLsInR3x8cvDvOvcrKZs4Rvn704jlWcSEEegSMYHvhONufbwOPqN5Vnwyb0uUA2kbWIrK5GXyRZvxOatzNrpP2OEU1Zsl5D7hfbHfuDHhcx0TbgCXnyMm3IAPlpvHhIa9mieKq25MIOy5MYFxXLNni+oDBD528y+Mb58SwUVgk2uwGjxwTc5Y49primpN0G+jfPcX2m49tjqb57VcZ8/Ir8D3IxrfnhzkynLVphfJt7r4o7yfanMXc+TnXcyRH/bkKtMj/pgTx/R5nnxkXvVwlC+ls3kesmxDTHw3m3Le6wiEnsDf20m2C1ST3JW6Zmla1/XNS55aC3mVW9+hZulBvdILv99HOW2EYhZ02En9B5WnIT5ln3K2ZA87W3EexcOwkYmISCZhn5ZcN2zFXHB3pl+ARtjoT9h7+4SwHjxqmwN5YWSO2rmMqkGNGHxC0unKlQe3oddEvcJ7UDO28jmch6JnqHNG14eYd6JU642Zd9vdOuwln/oReapb74XE3i7Md+WpXm1FPtVAc/gdQhxq5Dsod5Cfb+eeUYprVfJRqFW5ruzyqSsf95w15K2PcYZkntOa53IH1cEW00QdjH5II+KCAR0Dw+1hmbbDpCesp74A9a1wt53EA92rWy8Peerlx2vl9Z4fQV/g9CERaKb+wB301Kr7XN79atugf23rlZN6cRtxks2I4M7+Tvt0H85Tvw9ALod7e5nGuhwXdvw3tkvqEyQ63Z5OG+QeRU6zA3hqQ29nJ31vztiEp3AW+R7pCjSRE0dseRixhfofOI+w9rT6Tv3Euu+YJ7vHfB/nZapvAVy5871k70XCKdVPNudTmo6btxHeVE7nDAIv93rnL5BOqjjU9xLw9AMCqmf0LHSWoz4A5HDtOFVE3lLrG4VDNQBjpUy9S/CpMUnYVbiinBT2qXuqsMUm2KIBu9+BNWuqV0u5BtsrsMR9GspzeR7+r5lqdei+ZKTbgJf9jBfq4WE+uDvdVzL6O4S22QLZLGhdVLhE3yV2tAAMR7i/g/wGd9ZC8zIWZZqQ0YE974Q978LdtnLfq+IfuYepfZ6O1aq3qmK1mkesLqpcR/0d9fON0NWK9o3UT2edUr5pHSEfUaC7gd/L67sJ+Pi9gMduKn5vUN0/bPGwU+C6vh81NvfqqK6HzdTHhD0Uo/k+CFtJh+oF9pPQD+Krswy64xW6cWeOfWsMWIXvq/YL6ug2VWJNpW52qBZi37jRH0KWen/o9VEFH1nbPTxJD0+owTfl6f6NcRW613GT+UE/QfvnQr1dCI9diGWzB/z0kl2AnzjbBsVU2CH74jn3DcJjC9K1BeB9e7bXuQeYv5f6isBxCTgWGsdbFY6xF/ZuZPaLvZKw3Fcw+zgGDHG/JB0pGIk+umOcuZ/69FEDfWacg9pF7siV7QeQZzXz20DlLYHtgN8YWO5sG/xAnuRdNu8KV14/rF1n/T8Febkf6FyszbVQn37AOOJ4xDah+9fsK7o8fuCaW9/Rm0mNTQzotxD1/sFvIcUxl/9sQoToPQQ0Vjy+BG8RRA+xoi5XC27T9FRsVPQuVejFuKd+Cd/Xqt8d3ceqz9NBz63JPHl60fPeov2A8gmqPqE1ySLlqHq9gzdCP38Q+ETTruTn7A9Ql5p3BslGrlfzIN+cwXbjoX5LQk4eKjGNcpvyp0Q3jhw45Rjud/jTLTpPsH3yBA/9hg15gpuDUg8fmH0Xstf1zqCvDt2zUPdP/LA90Lsm4iz1S+F7s3jf8NSiO+trUcfhWjQ5SXkI+oPkp9HTrL6RWaoW9cvXg+c1BgY972vXK3vRA6rQjE+oNzjkTqCJnqp/PxZ3dcTTX9D3yu+X7rubeo/j3gq/35LsFMP3aVno7ZHqGFU/qFoCPpfvZk3l776yLNTbB97SqnimumTcoxddc/rSWvbk5q4MVSwT35W6dzJcrXsnlM/kum1izINxb2xEb8IP48H39Zm0z31rrPQnve/buPt7KDbDR0Y21gPAYX1O6H3v0bmzwil0YRHeSDc179Nh+BGqz+FLOdcl3+2+KSFn3vi+k8Se/IkTz6n/U/DVPz/56ZF87tjIkWdP5n7wfP7UyY/4RwT54/hbhbXG1k9/bES/sc4/QsyVmjp6v/cOHYGfXe3qdwTdMvp5oPP8f7518q8nPnph26H+Lx7bIr8986cnP9z59rmr+xsPHL//j7/LfwkM9XJx+CAAAA==');

export class SwapExactInput extends Script<SwapExactInputInputs, SwapExactInputOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
